import java.io.PrintWriter
import kotlin.system.exitProcess

fun main(args: Array<String>) {
    if (args.size != 1) {
        println("Usage: generate_ast <output directory>")
        exitProcess(1)
    }
    val outputDir = args[0]

    AstGenerator.defineAst(
        outputDir,
        "Expression",
        listOf(
            "Assign     : Token name, Expression value",
            "Binary     : Expression left, Token operator, Expression right",
            "Grouping   : Expression expr",
            "Literal    : Any? value",
            "Unary      : Token operator, Expression right",
            "Variable   : Token name"))

    AstGenerator.defineAst(
        outputDir,
        "Statement",
        listOf(
            "Block       : List<Statement> statements",
            "Expr        : Expression expr",
            "Print       : Expression expr",
            "Variable    : Token name, Expression? value"))
}

/**
 * Implements functions to quickly generate our Expression.kt file, which describes all the possible
 * grammar classes.
 */
object AstGenerator {

    /** Defines Expression abstract class and its "children" types. */
    fun defineAst(outputDir: String, baseName: String, types: List<String>) {
        val writer = PrintWriter("$outputDir/$baseName.kt", "UTF-8")

        writer.println("/** This file is autogenerated using [AstGenerator.defineAst]. */")

        // define Expression visitor interface
        writer.println("interface ${baseName}Visitor<T> {")
        writer.println("\tfun visit(${baseName.lowercase()}: $baseName): T")
        writer.println("}")
        writer.println()

        // define Expression sealed class
        writer.println("sealed class $baseName {")
        writer.println("\tfun <T> accept(visitor: ${baseName}Visitor<T>): T = visitor.visit(this)")
        writer.println()

        // define AST types
        types.forEach { type ->
            val className = type.split(":")[0].trim()
            val fields = type.split(":")[1].trim()
            defineAstType(writer, baseName, className, fields)
        }

        writer.println("}")
        writer.close()
    }

    /** Defines AST type data class. */
    private fun defineAstType(
        writer: PrintWriter,
        baseName: String,
        className: String,
        fieldList: String
    ) {
        writer.print("\tdata class $className(")

        // constructor members
        val fields = fieldList.split(", ")
        fields.forEachIndexed { index, it ->
            val type = it.split(" ")[0]
            val name = it.split(" ")[1]
            if (index == fields.size - 1) writer.print("val $name: $type") // last
            else writer.print("val $name: $type, ")
        }

        writer.println("): $baseName()")
    }
}
