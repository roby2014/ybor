program             -> declaration* EOF ;

declaration         -> varDeclaration
                    | statement ;

statement           -> exprStatement
                    | printStatement
                    | block;

block               -> "{" declaration* "}" ;

exprStatement       -> expression ";" ;
printStatement      -> "print" expression ";" ;

varDeclaration      -> "var" IDENTIFIER ( "=" expression )? ";" ;

expression  -> assignment ;
assignment  -> IDENTIFIER "=" assignment
            | equality ;
equality    -> comparison ( ( "==" | "!=" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+" ) factor )* ;
factor      -> unary ( ( "*" | "/" ) unary )* ;
unary       -> ( "-" | "!" ) unary
            | primary ;
primary     -> NUMBER | STRING | IDENTIFIER | "true" | "false" | "nil"
            | "(" expression ")" ;